C51 COMPILER V9.00   MAIN                                                                  08/14/2015 10:24:43 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*************************************************************************************************
   2          * 文件描述：SPI与AD通信，PWM控制电机，IO口控制led灯,串口与ARM通信
   3          * 程序文件：main.c
   4          * 版    本：V0.1
   5          * 日    期：2014.08.22
   6          * 作    者：杨志伟、王海
   7          * 芯    片：STC12C5A60S2
   8          * 时    钟：11.0592MHz
   9          * 开发环境：Keil uVision V4.00a
  10          * 备    注：
  11          *                       单片机P34、VCC、P06、P1.3引脚连接M415-64步进驱动器的ENA、OPTO、DIR、PUL引脚
  12          *                       ENA:使能信号，禁止或允许驱动器工作，低电平禁止
  13          *                       OPTO：驱动电源（+5V）
  14          *                       DIR：方向信号，用于改变电机转向，TTL电平驱动
  15          *                       PUL：脉冲信号，上升沿有效，每当脉冲由低变高时电机走一步
  16          *
  17          *                       单片机P15、P16、P17引脚连接ARM板SPIMOSI1、SPIMISO1、SPICLK1
  18          *
  19          *                       单片机P10引脚控制LED
  20          * 修改引脚定义：
  21          *                       time:2014.09.04
  22          *                       单片机P1.5、VCC、P1.4、P1.3引脚连接M415-64步进驱动器的ENA、OPTO、DIR、PUL引脚
  23          *                       单片机P4.1、P4.2、P4.3引脚连接ARM板SPIMOSI1、SPIMISO1、SPICLK1
  24          *                       单片机P1.6引脚控制LED
  25          ***************************************************************************************************/
  26          
  27          
  28          #include "stc12c5a60s2.h"       //包含STC12C5A60S2寄存器定义文件
  29          #include <I2C.H>
  30          
  31          #define uchar unsigned char
  32          #define SlaveAddress 0X60
  33          
  34          sbit led = P1^6;        //LED控制位
  35          sbit pwm_ena = P1^5;   //PWM时能信号
  36          sbit pwm_dir = P1^4;    //PWM方向信号
  37          sbit spi_cs = P4^0;
  38          sbit nOC1=P3^3;      //外部中断信号
  39          sbit nOC2 = P3^4;      //返回内部光耦信息 
  40          sbit nOC3 = P3^5;      //定义中断
  41          
  42          unsigned char D1=0;
  43          unsigned char D2=0;
  44          unsigned char rec_mes_num;        //串口读取数组变量
  45          unsigned char rec_mes[13];        //串口读取数组
  46          unsigned char uart_rec_status; //帧数据接收完成标志
  47          unsigned char flag_send_ADC = 0;        //是否要读AD转换后的数据
  48          unsigned char spi_buff[4];       //SPI数据帧
  49          unsigned char uart_buff;
  50          unsigned char flag=0;    //SPI是否开始接收数据标志
  51          unsigned long int i;
  52          unsigned char totalnum=0;       //组装SPI数据帧控制位
  53          unsigned int num=0;                     //一次SPI返回多少个数据
  54          unsigned char pwmFreL = 230;    //设置PWM频率值 230=133.34 240=211.779hz  250=512Hz 251=600 252=720 253=900.0
             -62 254=1.2kHz 255=3.6kHz
C51 COMPILER V9.00   MAIN                                                                  08/14/2015 10:24:43 PAGE 2   

  55          unsigned char frelight = 127;
  56          unsigned int flag_noc2=0;
  57           int adcdata=0;
  58           int adc[1];
  59          void SPI_write(unsigned char);
  60          void SendUart(unsigned char);
  61          
  62          /*
  63          *控制LED灯亮度，共12位
  64          */
  65          void write_mcp4725(unsigned char high, unsigned char low)
  66          {
  67   1                      unsigned char temp=0;
  68   1                      Start_I2c();    //启动总线
  69   1                      temp=(SlaveAddress << 1) | 0;   //发送器件地址
  70   1                      SendByte(temp);
  71   1                      if(ack==0) return;
  72   1                      SendByte(high);//发送控制字节高位
  73   1                      if(ack==0) return;
  74   1                      SendByte(low);//发送控制字节低位
  75   1                      if(ack==0) return;
  76   1                      Stop_I2c();     //结束总线
  77   1      }
  78          
  79          
  80          /*********************************************************************************************
  81          函数名：SPI初始化程序
  82          调用：SPI_init()
  83          参数：无
  84          返回值：无
  85          备注：无
  86          *********************************************************************************************/
  87          void SPI_init()
  88          {
  89   1              AUXR1|=0x20;                                    //SPI从P1口切换到P4口
  90   1          SPCTL=0xd0;                    //详细注释与汇编语言相同
  91   1              SPSTAT=0xc0;                   //清0标志位SPIF和WCOL
  92   1              IE2=IE2|0x02;                  //ESPI(IE2.1)=1,允许SPIF产生中断
  93   1      
  94   1              EA=1;                      //开总中断   
  95   1      }
  96          
  97          
  98          /*******************************************************************************************
  99          函数  名：串口1初始化函数
 100          调    用：uart1_init()
 101          入口参数：无
 102          返 回 值：无    
 103          备    注：STC12C5A60S2单片机串口1
 104                            晶振频率：11.0592M；波特率9600                  
 105          *******************************************************************************************/
 106          void uart1_init(void)
 107          {       
 108   1              //初始化串口        //9600bps@11.0592MHz
 109   1          PCON &= 0x7f;            //波特率不倍速
 110   1          SCON = 0x50;              //8位数据,可变波特率
 111   1          BRT = 0xDC;            //设定独立波特率发生器重装值
 112   1          AUXR |= 0x04;             //独立波特率发生器时钟为Fosc,即1T
 113   1          AUXR |= 0x01;             //串口1选择独立波特率发生器为波特率发生器
 114   1          AUXR |= 0x10;             //启动独立波特率发生器
 115   1      
 116   1              EA = 1; //开总中断      
C51 COMPILER V9.00   MAIN                                                                  08/14/2015 10:24:43 PAGE 3   

 117   1              ES = 1; //开串口中断
 118   1              TR1 = 1;        //启动串口1     
 119   1      }
 120          
 121          /********************************************************************************************
 122          函数名：定时器0初始化函数
 123          调用：timer0_init();
 124          参数：无
 125          返回值：无
 126          备注：无
 127          **********************************************************************************************/
 128          void timer0_init(void)
 129          {
 130   1      //      TMOD = 0x01;    //使用位操作，避免对其他定时器产生影响
 131   1      //      TL0 = (65536-pwmFrequency)%256; //设置初值
 132   1      //      TH0 = (65536-pwmFrequency)/256;
 133   1      //      TL0=64000;
 134   1      //      TH0=64000>>8;
 135   1              TMOD |=0x03;    //使用模式2，8位自动重装模式，使用位操作，避免对其他定时器产生影响
 136   1              TL0 = pwmFreL;
 137   1              EA = 1;         //开总中断
 138   1              ET0 = 1;        //开定时器0中断
 139   1              TR0 = 1;        //启动定时器0
 140   1              TR1 = 0;
 141   1      }
 142          
 143          
 144          /*********************************************************************************************
 145          函数名：PWM初始化函数
 146          调  用：PWM_init();
 147          参  数：无
 148          返回值：无
 149          结  果：将PCA初始化为PWM模式，初始占空比为0
 150          备  注：需要更多路PWM输出直接插入CCAPnH和CCAPnL即可
 151          /**********************************************************************************************/
 152          void PWM_init (void)
 153          {
 154   1              CMOD=0x04; //设置PCA定时器,通过CPS2、CPS1、CPS0位可调频率
 155   1          CL=0x00;   
 156   1          CH=0x00;
 157   1              CCAPM0=0x42; //PWM0设置PCA工作方式为PWM方式（0100 0010）
 158   1          CCAP0L=0x00; //设置PWM0初始值与CCAP0H相同
 159   1              CCAP0H=0x00; // PWM0初始时为0
 160   1      
 161   1      //CCAPM1=0x42; //PWM1设置PCA工作方式为PWM方式（使用时删除//）
 162   1      //CCAP1L=0x00; //设置PWM1初始值与CCAP0H相同
 163   1      //CCAP1H=0x00; // PWM1初始时为0
 164   1      
 165   1              CR=1; //启动PCA定时器
 166   1      }
 167          
 168          /*********************************************************************************************
 169          函数名：INT1初始化程序
 170          调用：INT1_init()
 171          参数：无
 172          返回值：无
 173          备注：无
 174          *********************************************************************************************/
 175          void INT1_init()
 176          {
 177   1              IT1 = 1;                        //set INT1 int type (1:Falling only 0:Low level)
 178   1          EX1 = 1;                        //enable INT1 interrupt
C51 COMPILER V9.00   MAIN                                                                  08/14/2015 10:24:43 PAGE 4   

 179   1          EA = 1;                         //open global interrupt switch
 180   1      }
 181          
 182          void send()
 183          {
 184   1              SendUart(0xff);
 185   1              SendUart(0x0f);
 186   1              SendUart(0x0f);
 187   1              SendUart(0xff); 
 188   1      }
 189          /*********************************************************************************************
 190          函数名：PWM0占空比设置函数
 191          调  用：PWM0_set();
 192          参  数：0x00~0xFF（亦可用0~255）
 193          返回值：无
 194          结  果：设置PWM模式占空比，为0时全部高电平，为1时全部低电平
 195          备  注：如果需要PWM1的设置函数，只要把CCAP0L和CCAP0H中的0改为1即可
 196          /**********************************************************************************************/
 197          void PWM0_set (unsigned char a)
 198          {
 199   1              CCAP0L = a; //设置值直接写入CCAP0L
 200   1              CCAP0H = a; //设置值直接写入CCAP0H
 201   1      }
 202          
 203          
 204          /*********************************************************************************************
 205          函数名：主函数
 206          调  用：无
 207          参  数：无
 208          返回值：无
 209          结  果：程序开始处，无限循环
 210          备  注：
 211          /**********************************************************************************************/
 212          void main (void)
 213          {
 214   1              
 215   1              led = 0;        //默认LED灯灭   
 216   1              timer0_init();  //定时器0初始化
 217   1      
 218   1      
 219   1              PWM_init(); //PWM初始化
 220   1              pwm_ena = 0;
 221   1              pwm_dir = 0;   //出仓
 222   1              PWM0_set(255); //设置PWM占空比,总共255
 223   1              
 224   1              uart1_init();   //串口1初始化   
 225   1      
 226   1          SPI_init(); //SPI初始化
 227   1      
 228   1              INT1_init();
 229   1              uart_buff=0;
 230   1      
 231   1              for(i=0;i<4;i++)
 232   1                      spi_buff[i]=0;
 233   1      
 234   1              spi_cs=0;
 235   1              SPI_write(0x23);                 //AD初始化
 236   1              SPI_write(0x1b);
 237   1              SPI_write(0x13);
 238   1              SPI_write(0x4e);
 239   1      
 240   1              uart_rec_status  = 0;
C51 COMPILER V9.00   MAIN                                                                  08/14/2015 10:24:43 PAGE 5   

 241   1      
 242   1              while(1)
 243   1              {
 244   2                      if(uart_rec_status)        //帧接收完成处理
 245   2                      {
 246   3                              
 247   3                              uart_rec_status = 0;    //清零，接收下一帧
 248   3                              if(rec_mes[0]==0xFF && rec_mes[1]==0xFF && rec_mes[11]==0xEF && rec_mes[12]==0xEF)
 249   3                              {
 250   4                                      /*帧处理*/
 251   4                                      if(rec_mes[2] == 0x11)
 252   4                                      {       
 253   5                                              //读AD转换后的数据
 254   5                                              flag_send_ADC = 1;                                           
 255   5                                              rec_mes[2] = 0x10;//及时关闭SPI，不要在下次while再发送数据      
 256   5                                      }
 257   4                                      else
 258   4                                              flag_send_ADC = 0;
 259   4      
 260   4                                      if(rec_mes[3] == 0x11)
 261   4                                      {
 262   5                                              //LED灯亮 
 263   5                                              led = 1;
 264   5                                              //控制LED灯亮度
 265   5                                              write_mcp4725(rec_mes[9],rec_mes[10]);                                  
 266   5                                      }
 267   4                                      else
 268   4                                      {
 269   5                                              led = 0;
 270   5                                      }
 271   4                                      
 272   4                                      if(rec_mes[4] == 0x11)   //电机使能
 273   4                                      {
 274   5                                                                                                                              
 275   5                                              if(rec_mes[5] == 0x11)
 276   5                                              {
 277   6                                                      //出仓
 278   6                                                      pwm_dir = 0;                                        
 279   6                                              }
 280   5                                              else if(rec_mes[5] == 0x10)
 281   5                                              {
 282   6                                                      //入仓
 283   6                                                      pwm_dir = 1;
 284   6                                              }
 285   5                                              
 286   5                                              pwmFreL = rec_mes[6];
 287   5                                              frelight= rec_mes[7];
 288   5                                              PWM0_set(frelight);
 289   5                                              pwm_ena = 1;
 290   5                                      }
 291   4                                      else
 292   4                                      {
 293   5                                              pwmFreL = rec_mes[6];
 294   5                                              frelight= rec_mes[7];
 295   5                                              PWM0_set(frelight);
 296   5                                              pwm_ena = 0;
 297   5                                      }
 298   4                              }
 299   3      
 300   3                      }//end if
 301   2      
 302   2                      if(flag_send_ADC == 1)
C51 COMPILER V9.00   MAIN                                                                  08/14/2015 10:24:43 PAGE 6   

 303   2                      {
 304   3                              //需要反馈数据
 305   3                              num = 1200;     //一次发送1200个数据
 306   3                              flag_send_ADC = 0;
 307   3                              while(num>0)
 308   3                              {
 309   4                                      SPI_write(0x0b);
 310   4                                      SPI_write(0xff);
 311   4                                      if(SPDAT==0x0b)
 312   4                                      {
 313   5                                              totalnum=0;
 314   5                                              flag=1;                  //是正确的数据了,开始组装SPI数据帧
 315   5                                              SPI_write(0x3b);
 316   5                                              SPI_write(0xff);
 317   5                                              SPI_write(0xff);
 318   5                                              spi_buff[3]=0xef;
 319   5                                              for(i=1;i<3;i++)
 320   5                                              SendUart(spi_buff[i]);  
 321   5                                              num--;
 322   5                                      } //if
 323   4                                      flag=0;
 324   4                                      //num--;
 325   4                              } //while
 326   3                      } //if
 327   2      
 328   2                       if(nOC2==0)
 329   2                      { //碰到了内部光耦，pwm_dir=1;进入，之后反转方向
 330   3                        //但可能多次触碰到内部光耦
 331   3              
 332   3                              if(pwm_dir==0)   //防止多次读取内部光耦信号
 333   3                                      continue;
 334   3                              pwm_dir = 0;
 335   3                              pwm_ena = 0;
 336   3                              SendUart(0xff);//发送f0表示碰到内部光耦
 337   3                              SendUart(0xf0);//发送f0表示碰到内部光耦
 338   3                              SendUart(0xf0);//发送f0表示碰到内部光耦
 339   3                              SendUart(0xff);//发送f0表示碰到内部光耦
 340   3                      //      break;
 341   3                      }  
 342   2              
 343   2              }//end while
 344   1      }
 345          
 346          
 347          /***************************************************************
 348                                      串口1中断服务程序
 349          ****************************************************************/
 350          void UART1_SER(void) interrupt 4 using 1
 351          {
 352   1              if(RI)                        //判断是接收中断产生
 353   1              {       
 354   2                      RI=0;                      //标志位清零
 355   2                      rec_mes[rec_mes_num]=SBUF;    //读入缓冲区的值
 356   2                      //SendUart(SBUF);
 357   2      
 358   2                      if(rec_mes[0] == 0xFF)     //判断是传过来的命令
 359   2                              rec_mes_num++;
 360   2                      else
 361   2                              rec_mes_num = 0;
 362   2                      if(rec_mes_num >= 13)      //接受13个字节，表示一个命令接收完毕
 363   2                      {
 364   3                              uart_rec_status = 1; //帧接收完成
C51 COMPILER V9.00   MAIN                                                                  08/14/2015 10:24:43 PAGE 7   

 365   3                              rec_mes_num = 0;
 366   3                      }
 367   2                      else
 368   2                              uart_rec_status = 0; //帧接未完成
 369   2              }
 370   1      } 
 371          
 372          /***************************************************************
 373                                      INT1外部中断服务程序
 374          ****************************************************************/
 375          void exint1()  interrupt 2           //(location at 0013H)
 376          {                 //外部光耦，中断实现
 377   1              
 378   1              if(pwm_dir==1)    //防止一直卡在外部
 379   1                      return;
 380   1              //while(nOC1==0); //中断触发后为0               
 381   1              pwm_ena = 0;
 382   1              pwm_dir=1;
 383   1              send();
 384   1      } 
 385          
 386          /***************************************************************
 387                                                  定时器0中断服务程序
 388          ****************************************************************/
 389          void timer0_isr(void) interrupt 1  using 2
 390          {
 391   1              TL0 = pwmFreL;
 392   1      //      TL0 = 64000;    //设置初值
 393   1      //      TH0 = 64000>>8;
 394   1      //      SendUart(0x12);
 395   1      //      pwm_fre=~pwm_fre;
 396   1      //      TF0=0;
 397   1      }
 398          
 399          /***************************************************************
 400                                                  SPI中断服务程序
 401          ****************************************************************/
 402          void SPI_ISR(void) interrupt 9 using 3
 403          {
 404   1      //    IE2&=0xfd;
 405   1              SPSTAT|=0x80;
 406   1      //      spi_buff=SPDAT;
 407   1              if(flag==1)
 408   1              {
 409   2                      if(totalnum==0)
 410   2                              spi_buff[totalnum]=0xff;
 411   2                      else
 412   2                              spi_buff[totalnum]=SPDAT;
 413   2                      totalnum++;
 414   2              }
 415   1      //      SendUart(SPDAT);                 //通过串口发送AD转换的数据给ARM
 416   1      //      spi_buff=0;
 417   1      //      IE2|=0x02;
 418   1      }
 419          
 420          /*****************************************************************
 421          函数名：通过SPI向ADC写入数据
 422          调用：SPI_write()
 423          参数：data1：给ADC写得数据
 424          返回值：无
 425          备注：无
 426          *****************************************************************/
C51 COMPILER V9.00   MAIN                                                                  08/14/2015 10:24:43 PAGE 8   

 427          void SPI_write(unsigned char data1)
 428          {
 429   1              IE2&=0xfd;
 430   1              SPDAT=data1;
 431   1              while((SPSTAT&0x80)==0);  //等待SPI数据传输完成
 432   1              IE2|=0x02;             //ESPI(IE2.1)=1,允许SPIF产生中断
 433   1      }                
 434          
 435          /*******************************************************************
 436          函数名：串口发送函数
 437          调用： SendUart()
 438          参数：dat：要通过串口发送的数据
 439          返回值：无
 440          备注：无
 441          *******************************************************************/
 442          void SendUart(unsigned char dat)
 443          {
 444   1              SBUF = dat; //send current data
 445   1              while (!TI); //wait pre-data sent
 446   1              TI = 0; //clear TI flag,发送控制器
 447   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    728    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     39       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
